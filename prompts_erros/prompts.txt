# Tarefa: Implementar Funcionalidades Completas para o Dashboard do Proprietário

## Contexto
A Edge Function `supabase/functions/dashboard-proprietario/index.ts` é responsável por consolidar dados para o dashboard do proprietário, mas atualmente utiliza dados mock para as seções de vendas e estoque consolidado, e não possui funcionalidades de cache, filtros por período ou métricas de comparação.

## Objetivo
Implementar as funcionalidades completas para o dashboard do proprietário, garantindo que os dados sejam reais, performáticos e que o dashboard ofereça mais insights.

## Tarefas Detalhadas

### 1. Implementar Stored Procedures (RPCs) no Supabase (SQL)

Crie ou atualize as seguintes funções SQL no Supabase para que a Edge Function possa buscar dados reais:

#### a) `get_vendas_por_farmacia_30_dias`
- **Descrição**: Esta função deve retornar o total de vendas e a quantidade de vendas para cada farmácia associada a um `proprietario_id` específico nos últimos 30 dias.
- **Parâmetros**: `p_proprietario_id UUID`
- **Retorno**: Uma tabela com as colunas:
    - `farmacia_id UUID`
    - `farmacia_nome TEXT`
    - `total_vendas NUMERIC` (soma dos valores das vendas)
    - `quantidade_vendas INTEGER` (contagem de vendas)
- **Lógica**:
    - Juntar as tabelas `vendas` e `farmacias`.
    - Filtrar por `proprietario_id` e vendas realizadas nos últimos 30 dias.
    - Agrupar por `farmacia_id` e `farmacia_nome`.

#### b) `get_estoque_consolidado_proprietario`
- **Descrição**: Esta função deve retornar o estoque total consolidado de cada produto e em quantas farmácias ele está disponível, para um `proprietario_id` específico.
- **Parâmetros**: `p_proprietario_id UUID`
- **Retorno**: Uma tabela com as colunas:
    - `produto_id UUID`
    - `produto_nome TEXT`
    - `estoque_total INTEGER` (soma do estoque de todas as farmácias do proprietário)
    - `farmacias_com_estoque INTEGER` (contagem de farmácias que possuem o produto em estoque)
- **Lógica**:
    - Juntar as tabelas `estoque`, `produtos` e `farmacias`.
    - Filtrar por `proprietario_id`.
    - Agrupar por `produto_id` e `produto_nome`.

### 2. Adicionar Cache na Edge Function

Implemente uma estratégia de cache na `dashboard-proprietario/index.ts` para melhorar a performance e reduzir a carga no banco de dados.

- **Estratégia Sugerida**: Utilize um mecanismo de cache simples baseado em tempo de vida (TTL), por exemplo, armazenando a resposta em uma variável global ou em um serviço de cache externo (se disponível e justificado). Para começar, um cache em memória com um TTL de 5-10 minutos é suficiente.
- **Implementação**:
    - Verifique se os dados estão em cache antes de executar as queries.
    - Se não estiverem, execute as queries, armazene o resultado no cache e defina um TTL.
    - Se estiverem, retorne os dados do cache.

### 3. Implementar Filtros por Período

Modifique a Edge Function para aceitar parâmetros de filtro de período (data de início e data de fim) para as métricas de vendas e, se aplicável, para outras métricas.

- **Parâmetros de Entrada**: Adicione `data_inicio` (string ISO 8601) e `data_fim` (string ISO 8601) ao corpo da requisição.
- **Lógica**:
    - Ajuste a query de vendas (`get_vendas_por_farmacia_30_dias` ou uma nova RPC) para usar esses parâmetros.
    - Se os parâmetros não forem fornecidos, mantenha o padrão de "últimos 30 dias".

### 4. Adicionar Métricas de Comparação

Inclua novas métricas no dashboard que permitam comparar o desempenho atual com períodos anteriores.

- **Exemplos de Métricas**:
    - Variação percentual das vendas em relação ao mês anterior.
    - Variação percentual do número de usuários ativos.
    - Comparação do estoque atual com a média dos últimos 3 meses.
- **Implementação**:
    - Adicione novas queries ou RPCs conforme necessário para calcular essas métricas.
    - Integre os resultados na estrutura de resposta da Edge Function.

## Considerações Adicionais

- **Padrões de Código**: Siga as regras do projeto Pharma.AI para padrões de código limpo, nomenclatura e estrutura.
- **Tratamento de Erros**: Mantenha e aprimore o tratamento de erros existente.
- **Testes**: Pense em como testar essas novas funcionalidades (unitários para as RPCs, integração para a Edge Function).
- **Documentação**: Atualize os comentários na Edge Function e, se necessário, crie documentação para as novas RPCs.
- **Segurança**: Garanta que o RLS (Row Level Security) no Supabase esteja configurado corretamente para as tabelas envolvidas nas RPCs.
