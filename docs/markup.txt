=================================================================
DOCUMENTAÇÃO DO SISTEMA DE MARKUP - PHARMA.AI
Módulo M11 - Sistema de Precificação Inteligente
=================================================================

1. VISÃO GERAL
=================================================================

O Sistema de Markup do Pharma.AI é um módulo completo para gerenciamento 
de precificação automática e inteligente de produtos farmacêuticos 
homeopáticos. Ele permite configurar margens de lucro por categoria de 
produto e aplicar automaticamente esses percentuais na criação de itens 
e importação de notas fiscais.

FUNCIONALIDADES PRINCIPAIS:
- Configuração global de markup padrão
- Configuração específica por categoria (medicamentos, insumos, embalagens)
- Cálculo automático de preços de venda
- Integração com importação de XML de NF-e
- Interface administrativa para configuração
- Validação de margens mínimas e máximas
- Histórico de alterações de preços
- Aplicação em lote de markups

2. ARQUITETURA DO SISTEMA
=================================================================

2.1. ESTRUTURA DE ARQUIVOS
---------------------------
src/
├── components/markup/
│   └── CampoMarkup.tsx           # Componente principal de markup
├── services/
│   └── markupService.ts          # Serviço de gerenciamento
├── types/
│   └── markup.ts                 # Tipos TypeScript
├── pages/admin/configuracoes/
│   └── markup.tsx                # Página de configuração
└── integrations/
    └── supabase/                 # Integração com banco

2.2. BANCO DE DADOS
-------------------
Tabelas principais:
- configuracao_markup           # Configurações globais
- categoria_markup             # Configurações por categoria
- historico_precos            # Auditoria de alterações
- insumos                     # Produtos com markup aplicado
- embalagens                  # Embalagens com markup aplicado

2.3. FLUXO DE DADOS
-------------------
1. Usuário configura markup global/categoria
2. Sistema aplica markup automaticamente em:
   - Novos insumos/embalagens
   - Importação de XML de NF-e
   - Edição manual de produtos
3. Preços são calculados e salvos
4. Histórico é mantido para auditoria

3. COMPONENTES PRINCIPAIS
=================================================================

3.1. CampoMarkup (Componente React)
------------------------------------
Localização: src/components/markup/CampoMarkup.tsx

PROPS:
- value: number              # Valor atual do markup
- onChange: (value) => void  # Callback para mudanças
- precoCusto: number        # Preço de custo para cálculo
- categoria: string         # Categoria do produto
- label?: string           # Label personalizada
- showCalculation?: boolean # Mostrar cálculo automático
- showCategoryDefault?: boolean # Mostrar padrão da categoria

FUNCIONALIDADES:
- Input numérico para markup manual
- Botão para aplicar markup padrão da categoria
- Exibição do preço de venda calculado
- Validação de valores mínimos/máximos
- Interface intuitiva com ícones

EXEMPLO DE USO:
```tsx
<CampoMarkup
  value={markup}
  onChange={setMarkup}
  precoCusto={10.50}
  categoria="medicamentos"
  label="Markup de Venda"
  showCalculation={true}
  showCategoryDefault={true}
/>
```

3.2. MarkupService (Serviço Principal)
--------------------------------------
Localização: src/services/markupService.ts

MÉTODOS PRINCIPAIS:

buscarConfiguracaoGeral()
- Retorna configuração global de markup
- Inclui markup padrão e margens mínimas

atualizarConfiguracaoGeral(config)
- Atualiza configuração global
- Valida dados antes de salvar

buscarCategorias()
- Lista todas as categorias de markup
- Retorna configurações específicas por categoria

atualizarCategoria(categoria, dados)
- Atualiza configuração de uma categoria específica
- Permite markup personalizado por tipo de produto

calcularMarkup(precoCusto, categoria)
- Calcula automaticamente o markup baseado na categoria
- Retorna preço de venda e margem de lucro

calcularPrecoVenda({preco_custo, markup})
- Calcula preço de venda baseado no markup
- Fórmula: preço_venda = preco_custo * markup

validarMarkup({markup, categoria, configuracao})
- Valida se markup está dentro dos limites
- Verifica margens mínimas e máximas

obterMarkupPadrao(categoria)
- Retorna markup padrão para uma categoria
- Fallback para configuração global

aplicarMarkupEmLote(entidades, markup, motivo)
- Aplica markup em múltiplos produtos
- Útil para atualizações em massa

getEstatisticasMarkup()
- Retorna estatísticas do sistema:
  - Markup médio, mínimo e máximo
  - Total de itens com markup personalizado
  - Distribuição por categoria

3.3. Página de Configuração
----------------------------
Localização: src/pages/admin/configuracoes/markup.tsx

SEÇÕES:
1. Configuração Geral
   - Markup padrão global
   - Margem mínima permitida
   
2. Configuração por Categoria
   - Cards individuais para cada categoria
   - Medicamentos, Insumos, Embalagens
   - Markup específico e margem mínima

FUNCIONALIDADES:
- Edição inline de valores
- Validação em tempo real
- Salvamento automático
- Feedback visual de sucessos/erros
- Interface responsiva

4. INTEGRAÇÃO COM OUTROS MÓDULOS
=================================================================

4.1. Formulário de Insumos (InsumoForm)
---------------------------------------
- Campo integrado de markup com CampoMarkup
- Aplicação automática do markup padrão da categoria
- Cálculo em tempo real do preço de venda
- Validação de margens mínimas

4.2. Formulário de Embalagens (EmbalagemForm)
---------------------------------------------
- Mesmo comportamento do formulário de insumos
- Categoria específica "embalagens"
- Markup padrão diferenciado

4.3. Importação de NF-e (notaFiscalService)
-------------------------------------------
- Aplicação automática de markup na importação
- Categorização inteligente de produtos
- Cálculo de estoque mínimo/máximo baseado no tipo
- Markup diferenciado por categoria detectada automaticamente

LÓGICA DE CATEGORIZAÇÃO:
- Florais de Bach → markup para medicamentos
- Tinturas-mãe → markup para insumos  
- Frascos/Potes → markup para embalagens
- Produtos CH → markup para medicamentos

4.4. Sistema de Auditoria
-------------------------
- Todos os changes de markup são registrados
- Histórico completo de alterações de preços
- Rastreabilidade de quem fez a alteração
- Timestamps detalhados

5. CONFIGURAÇÃO E SETUP
=================================================================

5.1. Configuração Inicial
--------------------------
1. Acesse /admin/configuracoes/markup
2. Configure markup padrão global (ex: 6.00 = 600%)
3. Configure markup por categoria:
   - Medicamentos: 6.00 (600%)
   - Insumos: 5.00 (500%)  
   - Embalagens: 3.00 (300%)
4. Defina margens mínimas para validação

5.2. Estrutura do Banco
------------------------
Execute as migrations do Supabase para criar:

```sql
-- Configuração global
CREATE TABLE configuracao_markup (
  id SERIAL PRIMARY KEY,
  markup_global_padrao DECIMAL(5,2) DEFAULT 6.00,
  markup_minimo DECIMAL(5,2) DEFAULT 1.10,
  markup_maximo DECIMAL(5,2) DEFAULT 20.00,
  margem_minima DECIMAL(5,2) DEFAULT 10.00,
  margem_maxima DECIMAL(5,2) DEFAULT 80.00,
  permitir_markup_zero BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Categorias de markup
CREATE TABLE categoria_markup (
  id SERIAL PRIMARY KEY,
  categoria_nome VARCHAR(50) UNIQUE NOT NULL,
  nome VARCHAR(100) NOT NULL,
  markup_padrao DECIMAL(5,2) NOT NULL,
  margem_minima DECIMAL(5,2) DEFAULT 10.00,
  ativo BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Inserir categorias padrão
INSERT INTO categoria_markup (categoria_nome, nome, markup_padrao, margem_minima) VALUES
('medicamentos', 'Medicamentos', 6.00, 15.00),
('insumos', 'Insumos', 5.00, 12.00),
('embalagens', 'Embalagens', 3.00, 8.00);

-- Histórico de preços
CREATE TABLE historico_precos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  entidade_tipo VARCHAR(20) NOT NULL, -- 'insumo' ou 'embalagem'
  entidade_id UUID NOT NULL,
  preco_anterior DECIMAL(10,2),
  preco_novo DECIMAL(10,2) NOT NULL,
  markup_anterior DECIMAL(5,2),
  markup_novo DECIMAL(5,2) NOT NULL,
  motivo TEXT,
  usuario_id UUID REFERENCES usuarios(id),
  created_at TIMESTAMP DEFAULT NOW()
);
```

5.3. Variáveis de Ambiente
---------------------------
Não são necessárias variáveis específicas para o markup.
Utiliza as mesmas configurações do Supabase.

6. USO E OPERAÇÃO
=================================================================

6.1. Fluxo de Trabalho Típico
------------------------------
1. CONFIGURAÇÃO INICIAL:
   - Admin configura markups por categoria
   - Define margens mínimas de segurança

2. CADASTRO DE PRODUTOS:
   - Usuario cria insumo/embalagem
   - Sistema aplica markup automaticamente
   - Usuario pode ajustar manualmente se necessário

3. IMPORTAÇÃO DE NF-e:
   - Sistema detecta categoria do produto
   - Aplica markup correspondente automaticamente
   - Calcula preço de venda final

4. MONITORAMENTO:
   - Admin monitora estatísticas de markup
   - Ajusta configurações conforme necessário
   - Revisa histórico de alterações

6.2. Cenários de Uso
--------------------

CENÁRIO 1: Novo Insumo
- Usuario acessa formulário de insumo
- Informa custo unitário: R$ 10,00
- Sistema aplica markup de insumos (5.00)
- Preço calculado: R$ 50,00
- Usuario pode ajustar se necessário

CENÁRIO 2: Importação XML
- Upload de XML de nota fiscal
- Produto "Tintura-mãe de Arnica" detectado
- Sistema categoriza como "insumos"
- Aplica markup 5.00 automaticamente
- Produto criado com preço calculado

CENÁRIO 3: Ajuste de Categoria
- Admin decide aumentar markup de medicamentos
- Altera de 6.00 para 6.50 na configuração
- Novos medicamentos usarão novo markup
- Produtos existentes mantêm markup atual

6.3. Melhores Práticas
----------------------
1. Configure markups conservadores inicialmente
2. Monitore margens regularmente
3. Ajuste por categoria conforme análise de mercado
4. Use markup personalizado apenas em casos especiais
5. Mantenha histórico para auditoria
6. Treine equipe nas configurações

7. TROUBLESHOOTING
=================================================================

7.1. Problemas Comuns
---------------------

PROBLEMA: Markup não está sendo aplicado
SOLUÇÃO: 
- Verificar se categoria está configurada
- Conferir se componente CampoMarkup está no formulário
- Validar configuração no banco de dados

PROBLEMA: Preços muito altos/baixos
SOLUÇÃO:
- Revisar markup da categoria
- Verificar se não há markup personalizado
- Conferir validações de margem mínima/máxima

PROBLEMA: Erro na importação de XML
SOLUÇÃO:
- Verificar se configuração de markup existe
- Conferir logs do notaFiscalService
- Validar estrutura do XML

7.2. Logs e Debug
-----------------
- Usar console.log do MarkupService para debug
- Verificar Network tab para erros de API
- Conferir logs do Supabase para erros de banco
- Usar React DevTools para estado dos componentes

7.3. Performance
----------------
- Cache de configurações carregadas uma vez por sessão
- Validações client-side para reduzir roundtrips
- Queries otimizadas com índices adequados
- Lazy loading de componentes pesados

8. ROADMAP E MELHORIAS FUTURAS
=================================================================

8.1. Funcionalidades Planejadas
-------------------------------
- Markup baseado em fornecedor
- Markup sazonal/promocional
- Sugestões de preço baseadas em IA
- Comparação com preços de mercado
- Markup automático baseado em rotatividade
- API para integração com sistemas externos

8.2. Melhorias Técnicas
-----------------------
- Testes automatizados completos
- Cache Redis para configurações
- Webhooks para alterações de preço
- Exportação de relatórios em PDF/Excel
- Dashboard de analytics avançado

8.3. UX/UI
----------
- Calculadora de markup avançada
- Preview de impacto nos preços
- Comparações visuais de margens
- Alertas proativos de markup baixo
- Interface mobile otimizada

9. REFERÊNCIAS E ANEXOS
=================================================================

9.1. Fórmulas Utilizadas
------------------------
Preço de Venda = Preço de Custo × Markup
Margem de Lucro = ((Preço de Venda - Preço de Custo) / Preço de Venda) × 100

Exemplo:
- Custo: R$ 10,00
- Markup: 6.00 (600%)
- Preço de Venda: R$ 10,00 × 6.00 = R$ 60,00
- Margem: ((60-10)/60) × 100 = 83,33%

9.2. Códigos de Categoria
-------------------------
- "medicamentos" → Produtos farmacêuticos finais
- "insumos" → Matérias-primas e tinturas
- "embalagens" → Frascos, potes e recipientes

9.3. Validações Implementadas
-----------------------------
- Markup mínimo: 1.10 (110%)
- Markup máximo: 20.00 (2000%)
- Margem mínima: Configurável por categoria
- Valores numéricos positivos apenas
- Campos obrigatórios validados

=================================================================
DOCUMENTAÇÃO ATUALIZADA EM: 2024-12-26
VERSÃO DO SISTEMA: 2.0.0
MÓDULO: M11 - Sistema de Markup
STATUS: ✅ IMPLEMENTADO E FUNCIONAL
================================================================= 