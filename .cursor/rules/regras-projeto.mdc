---
description: 
globs: 
alwaysApply: true
---
# Regras do Projeto Pharma.AI

Sempre Fale em PT-BR

Este documento define as diretrizes gerais para o desenvolvimento do projeto Pharma.AI, estabelecendo padr√µes, fluxos de trabalho e crit√©rios de qualidade a serem seguidos por todos os contribuidores.

## 1. Padr√µes de C√≥digo e Arquitetura

### 1.1. Padr√µes de C√≥digo Limpo

- Nomes de vari√°veis, fun√ß√µes e componentes devem ser descritivos e seguir conven√ß√£o camelCase (JS/TS) ou snake_case (SQL).
- Fun√ß√µes devem ter responsabilidade √∫nica e tamanho limitado (m√°x. 50 linhas recomendado).
- Coment√°rios devem explicar "por qu√™", n√£o "o qu√™" (o c√≥digo deve ser auto-explicativo).
- Evitar c√≥digo duplicado, favorecendo componentes/fun√ß√µes reutiliz√°veis.
- Manter a complexidade ciclom√°tica baixa (m√°x. 10 por fun√ß√£o).

### 1.2. Estrutura do Projeto
- Manter a separa√ß√£o clara entre frontend e backend.
- Organizar c√≥digo por dom√≠nio/m√≥dulo conforme definido na proposta consolidada.
- Frontend: Separar componentes de UI, l√≥gica de neg√≥cios e integra√ß√£o com API.
- Backend: Seguir princ√≠pios de API RESTful para endpoints Supabase.

### 1.3. Conven√ß√µes Espec√≠ficas
- Componentes React: Usar fun√ß√£o e n√£o classe, com tipagem TS expl√≠cita.
- Hooks: Nomear com prefixo "use" e documentar par√¢metros/retornos.
- SQL: Evitar consultas aninhadas complexas, favorecendo views ou fun√ß√µes.
- Modelos IA: Documentar datasets de treinamento, par√¢metros e m√©tricas.

## 2. Organiza√ß√£o de Ambientes

### 2.1. Ambientes Padr√£o
- **Desenvolvimento**: Para trabalho individual e testes locais.
- **Homologa√ß√£o**: Para valida√ß√£o de features por stakeholders.
- **Produ√ß√£o**: Ambiente final para usu√°rios reais.

### 2.2. Vari√°veis de Ambiente
- Nunca hardcoded, sempre via `.env` (local) ou gestor de segredos (produ√ß√£o).
- Nomenclatura: `VITE_` (para exposi√ß√£o no frontend), `SUPABASE_` (para backend).
- Documentar todas as vari√°veis necess√°rias em `.env.example`.

### 2.3. Gerenciamento de Depend√™ncias
- Evitar depend√™ncias com licen√ßas restritivas ou pouca manuten√ß√£o.
- Fixar vers√µes espec√≠ficas no `package.json` para garantir reprodutibilidade.
- Auditar regularmente depend√™ncias para vulnerabilidades.

## 3. Fluxos de Trabalho e Versionamento

### 3.1. Fluxo de Git
- **Trunk-based development**:
  - Branch principal: `main` ou `development`
  - Features em branches curtas: `feature/nome-feature`
  - Hotfixes: `fix/descricao-problema`
  - PRs obrigat√≥rios para merge em `main`

### 3.2. Commits e PRs
- Commits at√¥micos e com mensagens significativas seguindo conven√ß√£o:
  - `feat:` para novas funcionalidades
  - `fix:` para corre√ß√µes
  - `docs:` para documenta√ß√£o
  - `refactor:` para refatora√ß√µes
  - `test:` para adi√ß√£o/modifica√ß√£o de testes
- PRs devem ter descri√ß√£o clara, refer√™ncias a issues e screenshots quando UI

### 3.3. Versionamento Sem√¢ntico
- Seguir SemVer (MAJOR.MINOR.PATCH)
- MAJOR: Mudan√ßas incompat√≠veis com vers√µes anteriores
- MINOR: Adi√ß√µes de funcionalidades compat√≠veis
- PATCH: Corre√ß√µes de bugs compat√≠veis

## 4. Crit√©rios de Aceita√ß√£o e Testes

### 4.1. Tipos de Testes Requeridos
- **Unit√°rios**: Cobertura para l√≥gica cr√≠tica de backend e componentes frontend.
- **Integra√ß√£o**: Valida√ß√£o da comunica√ß√£o entre camadas.
- **E2E**: Simula√ß√£o de jornadas completas do usu√°rio para fluxos principais.
- **Usabilidade**: Testes com usu√°rios reais para garantir UX.
- **Performance**: Testes de carga para APIs e p√°ginas cr√≠ticas.
- **Seguran√ßa**: Revis√£o de RLS e permiss√µes no Supabase.

### 4.2. M√©tricas de Qualidade Alvo
- Cobertura de testes: ‚â• 80% para c√≥digo cr√≠tico.
- Tempo de resposta API: < 300ms para 95% das requisi√ß√µes.
- Performance frontend: LCP < 2.5s em p√°ginas chave.
- Disponibilidade: ‚â• 99.9% em produ√ß√£o.
- Taxa de erro: < 0.1% de requisi√ß√µes 5xx.
- Precis√£o modelos IA: Espec√≠fica por modelo (documentada).

### 4.3. Processo de Revis√£o
- Code review obrigat√≥rio por pelo menos 1 revisor.
- Verifica√ß√£o autom√°tica de linting e testes na CI.
- Valida√ß√£o de funcionalidades por PO em homologa√ß√£o.

## 5. Protocolos de Uso de IA

### 5.1. Responsabilidade e Transpar√™ncia
- Documentar explicitamente onde a IA est√° sendo utilizada.
- Manter humano no ciclo para decis√µes cr√≠ticas (ex: valida√ß√£o final de receitas).
- Garantir explicabilidade de resultados de modelos.

### 5.2. Privacidade e Seguran√ßa
- Modelos de IA n√£o devem armazenar dados sens√≠veis.
- Consentimento expl√≠cito para uso de dados em treinamento.
- Implementar t√©cnicas de anonimiza√ß√£o/pseudonimiza√ß√£o.

### 5.3. Requisitos para Modelos
- Documenta√ß√£o sobre datasets de treinamento.
- M√©tricas de performance e limites conhecidos.
- Estrat√©gia para monitoramento em produ√ß√£o.
- Plano para retreinamento/atualiza√ß√£o.

### 5.4. Valida√ß√£o de Resultados
- Monitoramento cont√≠nuo de efic√°cia (drift detection).
- Mecanismos para feedback de usu√°rios sobre resultados.
- Auditoria regular de respostas em cen√°rios cr√≠ticos.

## 6. Implementa√ß√£o por Fases

### 6.1. Prioriza√ß√£o de M√≥dulos
- A implementa√ß√£o segue a estrutura de fases e prioridades definida na proposta consolidada.
- Funcionalidades dentro de um m√≥dulo devem ser priorizadas com base em:
  - Valor para o usu√°rio
  - Depend√™ncias t√©cnicas
  - Complexidade de implementa√ß√£o

### 6.2. Transi√ß√£o Entre Fases
- A progress√£o entre fases requer que:
  - 100% dos m√≥dulos cr√≠ticos da fase anterior estejam completos
  - M√≥dulos de alta prioridade tenham pelo menos 90% das funcionalidades
  - Testes automatizados para funcionalidades cr√≠ticas estejam implementados
  - Aprova√ß√£o formal do stakeholder principal

### 6.3. Implementa√ß√£o Iterativa
- Cada m√≥dulo deve ser desenvolvido seguindo ciclos incrementais:
  - MVP funcional primeiro
  - Refinamento baseado em feedback
  - Expans√£o com features complementares
  - Otimiza√ß√£o de performance/UX

## 7. Monitoramento e Melhoria Cont√≠nua

### 7.1. Rastreamento de Bugs e Issues
- Todas as issues devem ser documentadas no sistema de tracking
- Prioriza√ß√£o baseada em impacto (cr√≠tico, alto, m√©dio, baixo)
- SLA para resolu√ß√£o conforme prioridade

### 7.2. Coleta de M√©tricas
- Implementar logging abrangente para diagn√≥stico
- Coletar m√©tricas de performance e uso
- Analisar padr√µes de uso para melhorias de UX

### 7.3. Ciclo de Feedback
- Mecanismos para coleta de feedback de usu√°rios
- Revis√µes peri√≥dicas de c√≥digo/arquitetura
- Retrospectivas ap√≥s cada milestone importante

## 8. Especificidades do Pharma.AI

### 8.1. Sistema de Autentica√ß√£o Avan√ßado
- **Obrigat√≥rio:** Usar Supabase Auth para autentica√ß√£o
- **Perfis:** Propriet√°rio, Farmac√™utico, Atendente, Manipulador
- **Permiss√µes:** Sistema granular (m√≥dulo + a√ß√£o + n√≠vel)
- **Prote√ß√£o:** Todas as rotas admin devem usar ForceAuth
- **DashboardRouter:** Roteamento inteligente por perfil
- **ProtectedComponent:** Prote√ß√£o granular de componentes
- **Error Boundaries:** Implementados em toda aplica√ß√£o
- **Sincroniza√ß√£o:** Autom√°tica entre auth.users e usuarios

### 8.2. Estrutura de Banco de Dados Unificada
- **MCP SUPABASE:** Sempre use MCP para interagir com o banco de dados
- **RLS obrigat√≥rio:** Todas as tabelas devem ter Row Level Security
- **Nomenclatura:** snake_case para tabelas e colunas
- **Triggers:** Autom√°ticos para updated_at, hist√≥rico e c√°lculos
- **Relacionamentos:** Sempre com ON DELETE apropriado
- **Produtos unificados:** Tabela √∫nica para insumos, embalagens e medicamentos
- **Sistema de markup:** Automatizado com triggers

### 8.3. Padr√µes de Componentes
- **TypeScript:** Obrigat√≥rio para todos os componentes (98% tipado)
- **Props:** Sempre tipadas com interfaces
- **Hooks:** Usar custom hooks para l√≥gica reutiliz√°vel
- **UI:** Baseado em shadcn/ui + Tailwind CSS
- **Error Boundaries:** Implementados para estabilidade

### 8.4. Edge Functions (15+ Implementadas)
- **Padr√£o Deno:** Estrutura consistente com CORS e autentica√ß√£o
- **Vendas:** vendas-operations (sistema completo)
- **Produtos:** gerenciar-produtos, gerenciar-lotes
- **Usu√°rios:** criar-usuario, excluir-usuario, check-first-access
- **IA:** chatbot-ai-agent (funcional)
- **Documentos:** buscar-dados-documento, workspace-document-data

### 8.5. M√≥dulos Implementados (Status Atualizado)
- **M09 - Usu√°rios e Permiss√µes:** 100% (Production Ready) ‚úÖ
- **M04 - PDV e Vendas:** 90% (Surpreendentemente avan√ßado) üü¢
- **M05 - Manipula√ß√£o/Produ√ß√£o:** 90% (Sistema completo) üü¢
- **M02 - Estoque:** 95% (Produtos unificados) üü¢
- **M06 - Financeiro:** 75% (Integrado com vendas) üü°
- **M01 - Cadastros:** 80% (Funcionalidades principais) üü°
- **M03 - Atendimento:** 60% (Estrutura avan√ßada) üü°
- **M08 - IA:** 25% (Chatbot funcional) üî¥

### 8.6. Pr√≥ximas Prioridades (Atualizadas)
1. **Finalizar relat√≥rios de vendas** - Completar M04 para 100%
2. **Expandir IA farmac√™utica** - Funcionalidades espec√≠ficas
3. **Implementar testes** - Cobertura m√≠nima de 80%
4. **Otimizar performance** - Preparar para produ√ß√£o
5. **Completar M03** - Sistema de atendimento com IA

### 8.7. Estado do Projeto
- **Fase atual:** Transi√ß√£o MVP ‚Üí Expans√£o (85% conclu√≠da)
- **Pronto para produ√ß√£o:** M09, M04, M05, M02
- **Diferencial competitivo:** Sistema de vendas + IA + manipula√ß√£o
- **Pr√≥ximo milestone:** Finalizar MVP e iniciar testes

---

*√öltima atualiza√ß√£o: 2025-01-28*
*Vers√£o: 3.0.0 - Reflete estado real do projeto* 